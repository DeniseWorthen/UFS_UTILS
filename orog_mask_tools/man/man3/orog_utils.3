.TH "orog_utils" 3 "Thu Oct 17 2024" "Version 1.13.0" "orog_mask_tools" \" -*- nroff -*-
.ad l
.nh
.SH NAME
orog_utils \- Module containing utilites used by the orog program\&.  

.SH SYNOPSIS
.br
.PP
.SS "Functions/Subroutines"

.in +1c
.ti -1c
.RI "subroutine, public \fBfind_nearest_pole_points\fP (i_north_pole, j_north_pole, i_south_pole, j_south_pole, im, jm, is_north_pole, is_south_pole)"
.br
.RI "Find the point on the model grid tile closest to the north and south pole\&. "
.ti -1c
.RI "subroutine, public \fBfind_poles\fP (geolat, nx, ny, i_north_pole, j_north_pole, i_south_pole, j_south_pole)"
.br
.RI "Find the point on the model grid tile closest to the north and south pole\&. "
.ti -1c
.RI "subroutine, public \fBget_index\fP (imn, jmn, npts, lonO, latO, delxn, jst, jen, ilist, numx)"
.br
.RI "Determine the location of a cubed-sphere point within the high-resolution orography data\&. "
.ti -1c
.RI "real function, public \fBget_lat_angle\fP (dy)"
.br
.RI "Convert the 'y' direction distance of a cubed-sphere grid point to the corresponding distance in latitude\&. "
.ti -1c
.RI "real function, public \fBget_lon_angle\fP (dx, lat_in)"
.br
.RI "Convert the 'x' direction distance of a cubed-sphere grid point to the corresponding distance in longitude\&. "
.ti -1c
.RI "real function, public \fBget_xnsum\fP (lon1, lat1, lon2, lat2, imn, jmn, glat, zavg, zslm, delxn)"
.br
.RI "Count the number of high-resolution orography points that are higher than the model grid box average orography height\&. "
.ti -1c
.RI "subroutine, public \fBget_xnsum2\fP (lon1, lat1, lon2, lat2, imn, jmn, glat, zavg, delxn, xnsum1, xnsum2, hc)"
.br
.RI "Count the number of high-resolution orography points that are higher than a critical value inside a model grid box (or a portion of a model grid box)\&. "
.ti -1c
.RI "subroutine, public \fBget_xnsum3\fP (lon1, lat1, lon2, lat2, imn, jmn, glat, zavg, delxn, xnsum1, xnsum2, HC)"
.br
.RI "Count the number of high-resolution orography points that are higher than a critical value inside a model grid box (or a portion of a model grid box)\&. "
.ti -1c
.RI "logical function, public \fBinside_a_polygon\fP (lon1, lat1, npts, lon2, lat2)"
.br
.RI "Check if a point is inside a polygon\&. "
.ti -1c
.RI "subroutine, public \fBlatlon2xyz\fP (siz, lon, lat, x, y, z)"
.br
.RI "Convert from latitude and longitude to x,y,z coordinates\&. "
.ti -1c
.RI "subroutine, public \fBminmax\fP (im, jm, a, title, imax, jmax)"
.br
.RI "Print out the maximum and minimum values of an array and optionally pass back the i/j location of the maximum\&. "
.ti -1c
.RI "subroutine, public \fBremove_isolated_pts\fP (im, jm, slm, oro, var, var4, oa, ol)"
.br
.RI "Remove isolated model points\&. "
.ti -1c
.RI "real function \fBspherical_angle\fP (v1, v2, v3)"
.br
.RI "Compute spherical angle\&. "
.ti -1c
.RI "real function, public \fBtimef\fP ()"
.br
.RI "Get the date/time from the system clock\&. "
.ti -1c
.RI "subroutine, public \fBtranspose_mask\fP (imn, jmn, mask)"
.br
.RI "Transpose the global landmask by flipping the poles and moving the starting longitude to Greenwich\&. "
.ti -1c
.RI "subroutine, public \fBtranspose_orog\fP (imn, jmn, glob)"
.br
.RI "Transpose the global orography data by flipping the poles and moving the starting longitude to Greenwich\&. "
.in -1c
.SS "Variables"

.in +1c
.ti -1c
.RI "real, parameter \fBdeg2rad\fP = 3\&.14159265358979/180\&."
.br
.RI "degrees per radians\&. "
.ti -1c
.RI "real, parameter \fBearth_radius\fP = 6371200\&."
.br
.RI "earth radius in meters\&. "
.ti -1c
.RI "real, parameter \fBpi\fP =3\&.1415926535897931"
.br
.RI "pi\&. "
.ti -1c
.RI "real, parameter \fBrad2deg\fP = 180\&./3\&.14159265358979"
.br
.RI "radians per degrees\&. "
.in -1c
.SH "Detailed Description"
.PP 
Module containing utilites used by the orog program\&. 


.PP
\fBAuthor:\fP
.RS 4
George Gayno NOAA/EMC 
.RE
.PP

.SH "Function/Subroutine Documentation"
.PP 
.SS "subroutine, public orog_utils::find_nearest_pole_points (integer, intent(in) i_north_pole, integer, intent(in) j_north_pole, integer, intent(in) i_south_pole, integer, intent(in) j_south_pole, integer, intent(in) im, integer, intent(in) jm, logical, dimension(im,jm), intent(out) is_north_pole, logical, dimension(im,jm), intent(out) is_south_pole)"

.PP
Find the point on the model grid tile closest to the north and south pole\&. 
.PP
\fBParameters:\fP
.RS 4
\fIi_north_pole\fP 'i' index of north pole\&. '0' if pole is outside of grid\&. 
.br
\fIj_north_pole\fP 'j' index of north pole\&. '0' if pole is outside of grid\&. 
.br
\fIi_south_pole\fP 'i' index of south pole\&. '0' if pole is outside of grid\&. 
.br
\fIj_south_pole\fP 'j' index of south pole\&. '0' if pole is outside of grid\&. 
.br
\fIim\fP i-dimension of model tile 
.br
\fIjm\fP j-dimension of model tile 
.br
\fIis_north_pole\fP 'true' for points surrounding the north pole\&. 
.br
\fIis_south_pole\fP 'true' for points surrounding the south pole\&. 
.RE
.PP
\fBAuthor:\fP
.RS 4
GFDL Programmer 
.RE
.PP

.PP
Definition at line 487 of file orog_utils\&.F90\&.
.PP
Referenced by io_utils::read_mdl_grid_file()\&.
.SS "subroutine, public orog_utils::find_poles (real, dimension(nx+1,ny+1), intent(in) geolat, integer, intent(in) nx, integer, intent(in) ny, integer, intent(out) i_north_pole, integer, intent(out) j_north_pole, integer, intent(out) i_south_pole, integer, intent(out) j_south_pole)"

.PP
Find the point on the model grid tile closest to the north and south pole\&. 
.PP
\fBParameters:\fP
.RS 4
\fIgeolat\fP Latitude on the supergrid\&. 
.br
\fInx\fP i-dimension of the supergrid\&. 
.br
\fIny\fP j-dimension of the supergrid\&. 
.br
\fIi_north_pole\fP 'i' index of north pole\&. '0' if pole is outside of grid\&. 
.br
\fIj_north_pole\fP 'j' index of north pole\&. '0' if pole is outside of grid\&. 
.br
\fIi_south_pole\fP 'i' index of south pole\&. '0' if pole is outside of grid\&. 
.br
\fIj_south_pole\fP 'j' index of south pole\&. '0' if pole is outside of grid\&. 
.RE
.PP
\fBAuthor:\fP
.RS 4
GFDL Programmer 
.RE
.PP

.PP
Definition at line 411 of file orog_utils\&.F90\&.
.PP
Referenced by io_utils::read_mdl_grid_file()\&.
.SS "subroutine, public orog_utils::get_index (integer, intent(in) imn, integer, intent(in) jmn, integer, intent(in) npts, real, dimension(npts), intent(in) lonO, real, dimension(npts), intent(in) latO, real, intent(in) delxn, integer, intent(out) jst, integer, intent(out) jen, integer, dimension(imn), intent(out) ilist, integer, intent(out) numx)"

.PP
Determine the location of a cubed-sphere point within the high-resolution orography data\&. The location is described by the range of i/j indices on the high-res grid\&.
.PP
\fBParameters:\fP
.RS 4
\fIimn\fP 'i' dimension of the high-resolution orography data set\&. 
.br
\fIjmn\fP 'j' dimension of the high-resolution orography data set\&. 
.br
\fInpts\fP Number of vertices to describe the cubed-sphere point\&. 
.br
\fIlonO\fP The longitudes of the cubed-sphere vertices\&. 
.br
\fIlatO\fP The latitudes of the cubed-sphere vertices\&. 
.br
\fIdelxn\fP Resolution of the high-resolution orography data set\&. 
.br
\fIjst\fP Starting 'j' index on the high-resolution grid\&. 
.br
\fIjen\fP Ending 'j' index on the high-resolution grid\&. 
.br
\fIilist\fP List of 'i' indices on the high-resolution grid\&. 
.br
\fInumx\fP The number of 'i' indices on the high-resolution grid\&. 
.RE
.PP
\fBAuthor:\fP
.RS 4
GFDL programmer 
.RE
.PP

.PP
Definition at line 714 of file orog_utils\&.F90\&.
.PP
Referenced by make_mask(), makemt2(), makeoa2(), and makepc2()\&.
.SS "real function, public orog_utils::get_lat_angle (real, intent(in) dy)"

.PP
Convert the 'y' direction distance of a cubed-sphere grid point to the corresponding distance in latitude\&. 
.PP
\fBParameters:\fP
.RS 4
\fIdy\fP Distance along the 'y' direction of a cubed-sphere point in meters\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
get_lat_angle Corresponding latitudinal distance in degrees\&.
.RE
.PP
\fBAuthor:\fP
.RS 4
GFDL programmer 
.RE
.PP

.PP
Definition at line 128 of file orog_utils\&.F90\&.
.PP
References earth_radius, and rad2deg\&.
.PP
Referenced by makeoa2()\&.
.SS "real function, public orog_utils::get_lon_angle (real, intent(in) dx, real, intent(in) lat_in)"

.PP
Convert the 'x' direction distance of a cubed-sphere grid point to the corresponding distance in longitude\&. 
.PP
\fBParameters:\fP
.RS 4
\fIdx\fP Distance along the 'x' direction of a cubed-sphere grid point in meters\&. 
.br
\fIlat_in\fP Latitude of the cubed-sphere point in degrees\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
get_lon_angle Corresponding distance in longitude in degrees\&.
.RE
.PP
\fBAuthor:\fP
.RS 4
GFDL programmer 
.RE
.PP

.PP
Definition at line 152 of file orog_utils\&.F90\&.
.PP
References deg2rad, earth_radius, and rad2deg\&.
.PP
Referenced by makeoa2()\&.
.SS "real function, public orog_utils::get_xnsum (real, intent(in) lon1, real, intent(in) lat1, real, intent(in) lon2, real, intent(in) lat2, integer, intent(in) imn, integer, intent(in) jmn, real, dimension(jmn), intent(in) glat, integer, dimension(imn,jmn), intent(in) zavg, integer, dimension(imn,jmn), intent(in) zslm, real, intent(in) delxn)"

.PP
Count the number of high-resolution orography points that are higher than the model grid box average orography height\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlon1\fP Longitude of corner point 1 of the model grid box\&. 
.br
\fIlat1\fP Latitude of corner point 1 of the model grid box\&. 
.br
\fIlon2\fP Longitude of corner point 2 of the model grid box\&. 
.br
\fIlat2\fP Latitude of corner point 2 of the model grid box\&. 
.br
\fIimn\fP 'i' dimension of the high-resolution orography data\&. 
.br
\fIjmn\fP 'j' dimension of the high-resolution orography data\&. 
.br
\fIglat\fP Latitude of each row of the high-resolution orography data\&. 
.br
\fIzavg\fP The high-resolution orography\&. 
.br
\fIzslm\fP The high-resolution land mask\&. 
.br
\fIdelxn\fP Resolution of the high-res orography data\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
get_xnsum The number of high-res points above the mean orography\&. 
.RE
.PP
\fBAuthor:\fP
.RS 4
GFDL Programmer 
.RE
.PP

.PP
Definition at line 816 of file orog_utils\&.F90\&.
.PP
Referenced by makeoa2()\&.
.SS "subroutine, public orog_utils::get_xnsum2 (real, intent(in) lon1, real, intent(in) lat1, real, intent(in) lon2, real, intent(in) lat2, integer, intent(in) imn, integer, intent(in) jmn, real, dimension(jmn), intent(in) glat, integer, dimension(imn,jmn), intent(in) zavg, real, intent(in) delxn, real, intent(out) xnsum1, real, intent(out) xnsum2, real, intent(out) hc)"

.PP
Count the number of high-resolution orography points that are higher than a critical value inside a model grid box (or a portion of a model grid box)\&. The critical value is a function of the standard deviation of orography\&.
.PP
\fBParameters:\fP
.RS 4
\fIlon1\fP Longitude of corner point 1 of the model grid box\&. 
.br
\fIlat1\fP Latitude of corner point 1 of the model grid box\&. 
.br
\fIlon2\fP Longitude of corner point 2 of the model grid box\&. 
.br
\fIlat2\fP Latitude of corner point 2 of the model grid box\&. 
.br
\fIimn\fP 'i' dimension of the high-resolution orography data\&. 
.br
\fIjmn\fP 'j' dimension of the high-resolution orography data\&. 
.br
\fIglat\fP Latitude of each row of the high-resolution orography data\&. 
.br
\fIzavg\fP The high-resolution orography\&. 
.br
\fIdelxn\fP Resolution of the high-res orography data\&. 
.br
\fIxnsum1\fP The number of high-resolution orography above the critical value inside a model grid box\&. 
.br
\fIxnsum2\fP The number of high-resolution orography points inside a model grid box\&. 
.br
\fIhc\fP Critical height\&. 
.RE
.PP
\fBAuthor:\fP
.RS 4
GFDL Programmer 
.RE
.PP

.PP
Definition at line 927 of file orog_utils\&.F90\&.
.PP
Referenced by makeoa2()\&.
.SS "subroutine, public orog_utils::get_xnsum3 (real, intent(in) lon1, real, intent(in) lat1, real, intent(in) lon2, real, intent(in) lat2, integer, intent(in) imn, integer, intent(in) jmn, real, dimension(jmn), intent(in) glat, integer, dimension(imn,jmn), intent(in) zavg, real, intent(in) delxn, real, intent(out) xnsum1, real, intent(out) xnsum2, real, intent(in) HC)"

.PP
Count the number of high-resolution orography points that are higher than a critical value inside a model grid box (or a portion of a model grid box)\&. Unlike routine \fBget_xnsum2()\fP, this routine does not compute the critical value\&. Rather, it is passed in\&.
.PP
\fBParameters:\fP
.RS 4
\fIlon1\fP Longitude of corner point 1 of the model grid box\&. 
.br
\fIlat1\fP Latitude of corner point 1 of the model grid box\&. 
.br
\fIlon2\fP Longitude of corner point 2 of the model grid box\&. 
.br
\fIlat2\fP Latitude of corner point 2 of the model grid box\&. 
.br
\fIimn\fP 'i' dimension of the high-resolution orography data\&. 
.br
\fIjmn\fP 'j' dimension of the high-resolution orography data\&. 
.br
\fIglat\fP Latitude of each row of the high-resolution orography data\&. 
.br
\fIzavg\fP The high-resolution orography\&. 
.br
\fIdelxn\fP Resolution of the high-res orography data\&. 
.br
\fIxnsum1\fP The number of high-resolution orography above the critical value inside a model grid box\&. 
.br
\fIxnsum2\fP The number of high-resolution orography points inside a model grid box\&. 
.br
\fIhc\fP Critical height\&. 
.RE
.PP
\fBAuthor:\fP
.RS 4
GFDL Programmer 
.RE
.PP

.PP
Definition at line 1029 of file orog_utils\&.F90\&.
.PP
Referenced by makeoa2()\&.
.SS "logical function, public orog_utils::inside_a_polygon (real, intent(in) lon1, real, intent(in) lat1, integer, intent(in) npts, real, dimension(npts), intent(in) lon2, real, dimension(npts), intent(in) lat2)"

.PP
Check if a point is inside a polygon\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlon1\fP Longitude of the point to check\&. 
.br
\fIlat1\fP Latitude of the point to check\&. 
.br
\fInpts\fP Number of polygon vertices\&. 
.br
\fIlon2\fP Longitude of the polygon vertices\&. 
.br
\fIlat2\fP Latitude of the polygon vertices\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
inside_a_polygon When true, point is within the polygon\&. 
.RE
.PP
\fBAuthor:\fP
.RS 4
GFDL programmer 
.RE
.PP

.PP
Definition at line 318 of file orog_utils\&.F90\&.
.PP
References latlon2xyz(), pi, and spherical_angle()\&.
.PP
Referenced by make_mask(), makemt2(), makeoa2(), and makepc2()\&.
.SS "subroutine, public orog_utils::latlon2xyz (integer, intent(in) siz, real, dimension(siz), intent(in) lon, real, dimension(siz), intent(in) lat, real, dimension(siz), intent(out) x, real, dimension(siz), intent(out) y, real, dimension(siz), intent(out) z)"

.PP
Convert from latitude and longitude to x,y,z coordinates\&. 
.PP
\fBParameters:\fP
.RS 4
\fIsiz\fP Number of points to convert\&. 
.br
\fIlon\fP Longitude (radians) of points to convert\&. 
.br
\fIlat\fP Latitude (radians) of points to convert\&. 
.br
\fIx\fP 'x' Coordinate of the converted points\&. 
.br
\fIy\fP 'y' Coordinate of the converted points\&. 
.br
\fIz\fP 'z' Coordinate of the converted points\&.
.RE
.PP
\fBAuthor:\fP
.RS 4
GFDL programmer 
.RE
.PP

.PP
Definition at line 101 of file orog_utils\&.F90\&.
.PP
Referenced by inside_a_polygon()\&.
.SS "subroutine, public orog_utils::minmax (integer, intent(in) im, integer, intent(in) jm, real, dimension(im,jm), intent(in) a, character(len=8), intent(in) title, integer, intent(out), optional imax, integer, intent(out), optional jmax)"

.PP
Print out the maximum and minimum values of an array and optionally pass back the i/j location of the maximum\&. 
.PP
\fBParameters:\fP
.RS 4
\fIim\fP The 'i' dimension of the array\&. 
.br
\fIjm\fP The 'j' dimension of the array\&. 
.br
\fIa\fP The array to check\&. 
.br
\fItitle\fP Name of the data to be checked\&. 
.br
\fIimax\fP The 'i' location of the maximum\&. 
.br
\fIjmax\fP The 'j' location of the maximum\&.
.RE
.PP
\fBAuthor:\fP
.RS 4
Jordan Alpert NOAA/EMC 
.RE
.PP

.PP
Definition at line 50 of file orog_utils\&.F90\&.
.PP
Referenced by tersub()\&.
.SS "subroutine, public orog_utils::remove_isolated_pts (integer, intent(in) im, integer, intent(in) jm, real, dimension(im,jm), intent(inout) slm, real, dimension(im,jm), intent(inout) oro, real, dimension(im,jm), intent(inout) var, real, dimension(im,jm), intent(inout) var4, real, dimension(im,jm,4), intent(inout) oa, real, dimension(im,jm,4), intent(inout) ol)"

.PP
Remove isolated model points\&. 
.PP
\fBParameters:\fP
.RS 4
\fIim\fP 'i' dimension of a model grid tile\&. 
.br
\fIjm\fP 'j' dimension of a model grid tile\&. 
.br
\fIslm\fP Land-mask on the model tile\&. 
.br
\fIoro\fP Orography on the model tile\&. 
.br
\fIvar\fP Standard deviation of orography on the model tile\&. 
.br
\fIvar4\fP Convexity on the model tile\&. 
.br
\fIoa\fP Orographic asymmetry on the model tile\&. 
.br
\fIol\fP Orographic length scale on the model tile\&. 
.RE
.PP
\fBAuthor:\fP
.RS 4
Jordan Alpert NOAA/EMC 
.RE
.PP

.PP
Definition at line 561 of file orog_utils\&.F90\&.
.PP
Referenced by tersub()\&.
.SS "real function orog_utils::spherical_angle (real, dimension(3), intent(in) v1, real, dimension(3), intent(in) v2, real, dimension(3), intent(in) v3)\fC [private]\fP"

.PP
Compute spherical angle\&. 
.PP
\fBParameters:\fP
.RS 4
\fIv1\fP Vector 1\&. 
.br
\fIv2\fP Vector 2\&. 
.br
\fIv3\fP Vector 3\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
spherical_angle Spherical Angle\&. 
.RE
.PP
\fBAuthor:\fP
.RS 4
GFDL programmer 
.RE
.PP

.PP
Definition at line 262 of file orog_utils\&.F90\&.
.PP
References pi\&.
.PP
Referenced by inside_a_polygon()\&.
.SS "real function, public orog_utils::timef ()"

.PP
Get the date/time from the system clock\&. 
.PP
\fBReturns:\fP
.RS 4
timef 
.RE
.PP
\fBAuthor:\fP
.RS 4
Mark Iredell 
.RE
.PP

.PP
Definition at line 1087 of file orog_utils\&.F90\&.
.PP
Referenced by tersub()\&.
.SS "subroutine, public orog_utils::transpose_mask (integer, intent(in) imn, integer, intent(in) jmn, integer(1), dimension(imn,jmn), intent(inout) mask)"

.PP
Transpose the global landmask by flipping the poles and moving the starting longitude to Greenwich\&. 
.PP
\fBParameters:\fP
.RS 4
\fIimn\fP i-dimension of landmask data\&. 
.br
\fIjmn\fP j-dimension of landmask data\&. 
.br
\fImask\fP The global landmask data\&. 
.RE
.PP
\fBAuthor:\fP
.RS 4
G\&. Gayno 
.RE
.PP

.PP
Definition at line 177 of file orog_utils\&.F90\&.
.PP
Referenced by io_utils::read_global_mask()\&.
.SS "subroutine, public orog_utils::transpose_orog (integer, intent(in) imn, integer, intent(in) jmn, integer(2), dimension(imn,jmn), intent(inout) glob)"

.PP
Transpose the global orography data by flipping the poles and moving the starting longitude to Greenwich\&. 
.PP
\fBParameters:\fP
.RS 4
\fIimn\fP i-dimension of orography data\&. 
.br
\fIjmn\fP j-dimension of orography data\&. 
.br
\fIglob\fP The global orography data\&. 
.RE
.PP
\fBAuthor:\fP
.RS 4
G\&. Gayno 
.RE
.PP

.PP
Definition at line 220 of file orog_utils\&.F90\&.
.PP
Referenced by io_utils::read_global_orog()\&.
.SH "Variable Documentation"
.PP 
.SS "real, parameter orog_utils::deg2rad = 3\&.14159265358979/180\&.\fC [private]\fP"

.PP
degrees per radians\&. 
.PP
Definition at line 17 of file orog_utils\&.F90\&.
.PP
Referenced by get_lon_angle()\&.
.SS "real, parameter orog_utils::earth_radius = 6371200\&.\fC [private]\fP"

.PP
earth radius in meters\&. 
.PP
Definition at line 14 of file orog_utils\&.F90\&.
.PP
Referenced by get_lat_angle(), and get_lon_angle()\&.
.SS "real, parameter orog_utils::pi =3\&.1415926535897931\fC [private]\fP"

.PP
pi\&. 
.PP
Definition at line 15 of file orog_utils\&.F90\&.
.PP
Referenced by inside_a_polygon(), and spherical_angle()\&.
.SS "real, parameter orog_utils::rad2deg = 180\&./3\&.14159265358979\fC [private]\fP"

.PP
radians per degrees\&. 
.PP
Definition at line 16 of file orog_utils\&.F90\&.
.PP
Referenced by get_lat_angle(), and get_lon_angle()\&.
.SH "Author"
.PP 
Generated automatically by Doxygen for orog_mask_tools from the source code\&.
